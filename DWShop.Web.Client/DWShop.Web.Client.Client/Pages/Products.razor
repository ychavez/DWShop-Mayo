@page "/products"
@using DWShop.Application.Features.Catalog.Commands.Create
@using DWShop.Application.Responses.Catalog
@using DWShop.Client.Infrastructure.Managers.Products
@using Microsoft.AspNetCore.Authorization
@using MudBlazor

@attribute [Authorize]

<MudText Typo="Typo.h2">Productos</MudText>


<MudTable Items="@Elements" Filter="FilterFunc">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Productos</MudText>
        <MudSpacer />
        <MudTextField Placeholder="Buscar" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      @bind-Value="searchString"
                      IconSize="Size.Medium"></MudTextField>

    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nombre</MudTh>
        <MudTh>Categoria</MudTh>
        <MudTh>Descripcion</MudTh>
        <MudTh>Resumen</MudTh>
        <MudTh>Precio</MudTh>
        <MudTh>Acciones</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nombre">@context.Name</MudTd>
        <MudTd DataLabel="Categoria">@context.Category</MudTd>
        <MudTd DataLabel="Descripcion">@context.Description</MudTd>
        <MudTd DataLabel="Resumen">@context.Summary</MudTd>
        <MudTd DataLabel="Precio">@context.Price.ToString("C2")</MudTd>
        <MudTd DataLabel="Acciones">
            <MudMenu Label="Acciones" EndIcon="@Icons.Material.Filled.ArrowDropDown">
                <MudMenuItem @onclick="@(()=> InvokeModal(context.Id) )">Editar</MudMenuItem>
                <MudMenuItem>Eliminar</MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {

    [Inject]
    IDialogService _dialogService { get; set; }

    [Inject]
    IGetProductsManager _getProductsManager { get; set; }

    private async Task InvokeModal(int id)
    {

        var parameters = new DialogParameters();

        var product = Elements.First(x => x.Id == id);
        parameters.Add(nameof(EditProduct.ProductCommand), new CreateCatalogCommand
            {
                Category = product.Category,
                Name = product.Name,
                Description = product.Description,
                Summary = product.Summary,
                Price = product.Price,
                PhotoURL = product.PhotoURL
            });

        var options = new DialogOptions() { CloseButton = true };

        var dialog = await _dialogService
        .ShowAsync<EditProduct>("Editar producto", parameters, options);


        var result = await dialog.Result;
    }


    public IEnumerable<CatalogResponse> Elements;

    private string searchString = string.Empty;

    private bool FilterFunc(CatalogResponse elemnt)
    {
        if (string.IsNullOrEmpty(searchString))
            return true;

        return elemnt.Name.Contains(searchString);
    }

    protected override async Task OnInitializedAsync()
    {
        Elements = (await _getProductsManager.GetAllProducts()).Data;
        await base.OnInitializedAsync();
    }

   
}